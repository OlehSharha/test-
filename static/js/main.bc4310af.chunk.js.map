{"version":3,"sources":["sharedScreen/Screenshot.png","sharedScreen/Screenshot1.png","components/FIrstAnswer/All.jsx","sharedScreen/Screenshot3.png","sharedScreen/Screenshot4.png","sharedScreen/Screenshot5.png","sharedScreen/Screenshot6.png","sharedScreen/Screenshot7.png","components/Angular/AboutAngular.jsx","sharedScreen/Screenshot8.png","sharedScreen/Screenshot9.png","components/Node.js/Node.jsx","App.jsx","index.jsx"],"names":["AboutAll","useState","isOpen","setIsOpen","className","type","onClick","src","box","alt","box1","AboutAngular","box3","box4","box5","box6","box7","AboutNode","box8","box9","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc4310af.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Screenshot.3ca76b87.png\";","export default __webpack_public_path__ + \"static/media/Screenshot1.c987e93c.png\";","/* eslint-disable no-tabs */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable max-len */\nimport React, { useState } from 'react';\nimport box from '../../sharedScreen/Screenshot.png';\nimport box1 from '../../sharedScreen/Screenshot1.png';\n\nexport const AboutAll = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n\n  const handleOpen = () => {\n    setIsOpen(true);\n  };\n\n  return (\n    <div className=\"html\">\n      {isOpen\n\n        ? (\n          <section className=\"answers\">\n            <button\n              className=\"but\"\n              type=\"button\"\n              onClick={() => {\n                handleClose();\n              }}\n            >\n              <p>Close answers about HTML/CSS/JS</p>\n            </button>\n            <h3>\n              1. Чи можна з js змінювати значення before, after?\n            </h3>\n            <h3>Відповідь:</h3>\n            <p>\n              Ні не можна змінити значення псевдоелементів, але можна змінити стилі які до них застосовуються, для того щоб змінити стилі нам потрібно через querySelector вибрати наш елемент з псевдокласом і потім використати\n              метод getComputedStyle куди передати вибраний через querySelector елемент.\n            </p>\n\n            <h3>\n              2.Що вказує значення \"1em\" і якого параметра він прив'язаний\n            </h3>\n            <h3>Відповідь:</h3>\n            <p>'1em' це одиниця вимірювання відносно батьківського елементу, наприклад висота блоку, шрифти і т.д, тобто якщо буде 2em то буде в два рази більше ніж у батьківського, якщо 0.5em то половина розміру батьківського</p>\n\n            <h3>\n              3. Вмістити три блоки 20X20px в ряд, блок шириною 60px,\n              при цьому у блоків повинні бути межі. Реалізуйте всі варіанти, які знаєте.\n\n            </h3>\n            <img src={box} alt=\"box\" />\n            <h3>Відповідь:</h3>\n            <p>\n              Є кілька варіантів, але для того щоб враховувати межі потрібно написати стиль box-sizing: border-box, можливо зробити за допомогою флексів(display:flex) і по стандарту там буде flex-direction: row, ще можна зробити за допомогою display:inline-block,\n              це комбіновані властивості блока, який ведеться як inline, тобто дозволяє ще елементам бути поруч з ним, а не розтягується на всю довжину. За допомогою грідів display: grid,\n              де ставимо блоку width: 60px, column-gap: 20px, grid-template-columns: repeat(3, 20px), встановлюємо 3 блоки по 20 пікселів.\n\n            </p>\n\n            <h3>\n              4. Є масив, де лежать об'єкти з датами,\n              відсортуйте його за датами.\n              <p>\n                {`let array = [\n\t\t\t\t{date: '2017-01-10'},\n\t\t\t\t{date: '2016-05-18'},\n\t\t\t\t{date: '2002-12-20'},\n\t\t\t\t{date: '2020-06-30'}\n\t\t\t\t];`\n                }\n                {\n\n                }\n\n              </p>\n            </h3>\n            <h3>Відповідь:</h3>\n            <p>\n              За допомогою методу сорт та методу Date()\n              <br />\n              {` const sort = (array) => {`}\n              <br />\n              {`let sortArray = array.sort((a, b) => (\n\t\tnew Date(a.date) - new Date(b.date)\n\t))`}\n              <br />\n              {`return sortArray `}\n              <br />\n              {`}`}\n              {' '}\n              <br />\n              {' '}\n              Тобто виклик функції з переданим масивом sort(array) нам поверне відфільтрований масив з датою.\n\n            </p>\n\n            <h3>\n              5.Напишіть код, який при натисканні на будь-який div всередині root буде виводити в консоль його id.\n            </h3>\n            <img src={box1} alt=\"box\" />\n            <h3>Відповідь:</h3>\n            <p>\n              Для того щоб не вішати обробник на кожен div, ми можемо використати event deligation на наш батьківський елемент, скріпт буде виглядати наступним чином:\n              {' '}\n              <br />\n              {' '}\n              <strong>\n                {\n                  `const root = document.querySelector('#root');\n  root.addEventListener('click', event => {\n    const clickedElement = event.target;\n    if (clickedElement.tagName === 'DIV') {\n      console.log(clickedElement.id);\n    }\n  })`\n                }\n                {' '}\n\n              </strong>\n\n            </p>\n          </section>\n        )\n        : (\n          <button\n            className=\"but\"\n            type=\"button\"\n            onClick={() => {\n              handleOpen();\n            }}\n          >\n            <p>Open answers about HTML/CSS/JS</p>\n          </button>\n        )\n      }\n    </div>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/Screenshot3.bdf791a2.png\";","export default __webpack_public_path__ + \"static/media/Screenshot4.2e52b53f.png\";","export default __webpack_public_path__ + \"static/media/Screenshot5.f96f8155.png\";","export default __webpack_public_path__ + \"static/media/Screenshot6.ff45749f.png\";","export default __webpack_public_path__ + \"static/media/Screenshot7.8519498d.png\";","/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable max-len */\nimport React, { useState } from 'react';\nimport box3 from '../../sharedScreen/Screenshot3.png';\nimport box4 from '../../sharedScreen/Screenshot4.png';\nimport box5 from '../../sharedScreen/Screenshot5.png';\nimport box6 from '../../sharedScreen/Screenshot6.png';\nimport box7 from '../../sharedScreen/Screenshot7.png';\n\nexport const AboutAngular = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n\n  const handleOpen = () => {\n    setIsOpen(true);\n  };\n\n  return (\n    <div className=\"angular\">\n      {isOpen ? (\n        <section className=\"answers\">\n          <button\n            className=\"but\"\n            type=\"button\"\n            onClick={() => {\n              handleClose();\n            }}\n          >\n            <p>Close answers about Angular</p>\n          </button>\n          <h3>\n            1. Яка різниця між *ngIf і [hidden]?\n          </h3>\n          <h3>Відповідь:</h3>\n          <p> основна різниця між *ngIf та [hidden] полягає в тому, що *ngIf дозволяє вставляти або видаляти елемент з DOM, в залежності від умови, а [hidden] приховує елемент на сторінці, залишаючи його в DOM. Вибір того, який підхід використовувати, залежить від конкретної ситуації та потреб користувачів.</p>\n\n          <h3>\n            2.Що таке Observable??\n          </h3>\n          <h3>Відповідь:</h3>\n          <p>Observable - це обєкт, який представляє потік асинхронних даних в програмі на мові TypeScript або JavaScript. Він може бути використаний для передачі даних між компонентами, сервісами, модулями</p>\n\n          <h3>\n            3. Розглянемо наступний компонент:\n\n          </h3>\n\n          <img src={box3} alt=\"\" />\n          <h3>\n            Виберіть правильні твердження про його використання (в іншому шаблоні компонента або модулі).\n            (Виберіть усі прийнятні відповіді.)\n            <br />\n            1.\n            {`<welcome name=\"TestDome\"></welcome> відображатиме: \"Welcome to TestDome!\".`}\n            <br />\n            2.\n            {`<welcome></welcome> нічого не відображатиме.`}\n            <br />\n            3.\n            {`@NgModule({ declarations: [ WelcomeComponent ] }) export class WelcomeModule {}\n         повідомляє, що компонент привітання належить модулю привітання.`}\n            <br />\n            4.\n            {` <hello name=\"{{ name }}\"></hello> відображатиме: \"Welcome to name!\".`}\n            <br />\n          </h3>\n          <h3>Відповідь:</h3>\n          <p>\n            Всі відповіді коректні окрім 4 тому що компонент\n            {`<hello>`}\n            {' '}\n            не існує і він не є зареєстрованим.\n          </p>\n\n          <h3>\n            4. Розглянемо наступний компонент, який можна використовувати для моделювання тварини та її шуму.?\n          </h3>\n\n          <img src={box4} alt=\"box\" />\n          <h3>\n            Виберіть правильні твердження про його використання (в іншому шаблоні компонента або модулі).\n            (Виберіть усі прийнятні відповіді.)\n            <br />\n            1.\n            Component, Input і Output всі необхідні імпорти цього компонента.\n            <br />\n            2.\n            {`При включенні компонента AnimalNoise у шаблон мають бути вказані вхідні дані як тварин, так і шуму.\n`}\n            <br />\n            3.\n            {`Параметр 'animal' у оголошенні @Input ('animal') не змінює інтерфейс компонента.\n`}\n            <br />\n            4.\n            {` При включенні до шаблону компонентів компонент AnimalNoise створює діапазон, що містить інтерполіроване ім'я тварин і кнопку, прив'язану до makeNoise().`}\n            <br />\n            5.\n            {`Компонент AnimalNoise може бути включений в інший шаблон за допомогою тега <AnimalNoise>.`}\n          </h3>\n          <h3>Відповідь:</h3>\n          <p>\n            1 Component та Input є необхідними імпортами для цього компонента, але Output не використовується тут, тому це твердження є неправильним.\n            <br />\n            2 Лише animal є обовязковим а noise ні\n            {' '}\n            <br />\n            3 Це твердження є правильним. @Input('animal') створює аліас для властивості animal, який може використовуватись в шаблоні, але не змінює інтерфейс компонента.\n            {' '}\n            <br />\n            4  Це твердження є частково правильним - компонент містить інтерпольоване ім'я тварин та кнопку, прив'язану до методу makeNoise(), але не створює діапазон.\n            <br />\n            5 Тег\n            {' '}\n            {`<AnimalNoise>`}\n            {' '}\n            неправильний - він повинен бути написаний з малих літер (тобто\n            {' '}\n            {`<animal-noise>`}\n            ) та використовувати ім'я компонента, а не селектор. Тому це твердження є неправильним.\n            <br />\n          </p>\n\n          <h3>\n            5. Розглянемо наступний модуль програми:\n\n          </h3>\n          <img src={box5} alt=\"\" />\n          <h3>\n            Які з таких тверджень щодо поведінки маршрутизаторів є правильними?\n            (Виберіть усі прийнятні відповіді.)\n            <br />\n            1.\n            Доступ до домашнього компонента можливий лише через перенаправлення кореневої URL-адреси.\n            <br />\n            2.\n            {`Параметр id не є обов'язковим, коли виконується виклик / detail / URL.\n\n`}\n            <br />\n            3.\n            {`Необов'язкові параметри можуть бути передані до будь-якого компонента через параметри запиту ActivatedRoute.\n`}\n            <br />\n            4.\n            {`/detail/100 використовуватиме <router-outlet name='route1'> для визначення позиції виду.`}\n            <br />\n            5.\n            {`Route, який перенаправляє на HomeComponent, активується на тих самих маршрутах, якщо властивість pathMatch: 'full' була видалена.\n.`}\n          </h3>\n          <h3>Відповідь:</h3>\n          <p>\n            Перші три правильні\n            <br />\n            4 Неправильно - дана URL-адреса містить параметр id, а не ім'я виду\n            <br />\n            5 Неправильно -  властивість pathMatch: 'full' означає, що шлях повинен співпадати повністю, включаючи початок і кінець URL-адреси\n          </p>\n\n          <h3>\n            6. Розглянемо наступні два базові класи, Positionable і Rotatable, і похідний клас MovingObject:\n\n          </h3>\n          <img src={box6} alt=\"\" />\n          <h3>\n            Виберіть правильні твердження.\n            (Виберіть усі прийнятні відповіді.)\n            <br />\n            1.\n            Функція applyMixins застосовує реалізації Positionable і Rotatable до MovingObject.\n            <br />\n            2.\n            {`Компілятор TypeScript підкреслить, що властивість \"align\" відсутня для типу MovingObject.\n.\n`}\n            <br />\n            3.\n            {`Оскільки MovingObject реалізує Rotatable, виклик mover.rotate(30) нічого не зробить.\n\n`}\n            <br />\n            4.\n            {` Клас Positionable можна змінити на інтерфейс без помилок компілятора.\n`}\n            <br />\n            5.\n            Властивості MovingObject необхідні як резервні для задоволення компілятора TypeScript.\n          </h3>\n          <h3>Відповідь:</h3>\n          <p>1 - Функція applyMixins застосовує реалізації Positionable і Rotatable до MovingObject - правильне.</p>\n\n          <h3>\n            7. Розглянемо такі компоненти:\n\n          </h3>\n          <img src={box7} alt=\"box\" />\n          <h3>\n            Нижче наведено файл address-list.component.html. Заповніть пробіли, щоб шаблон відображав один елемент li на адресу, і коректно пов'язував кожну адресу з полем AddressComponent.\n            <br />\n            {`<ul>`}\n            {' '}\n            <br />\n            {`\n        <li =\"let address of \">`}\n            <br />\n            {`\n            <app-address =\"address\"></app-address>`}\n            <br />\n            {`\n        </li>`}\n            {' '}\n            <br />\n            {`\n    </ul>`}\n            <br />\n\n          </h3>\n          <h3>Відповідь:</h3>\n          <p>\n            Для того щоб код працював потрібно внести такі зміни:\n            {' '}\n            {`<ul>\n    <li *ngFor=\"let address of addresses\">\n        <app-address [address]=\"address\"></app-address>\n    </li>\n\n</ul>`}\n            {' '}\n            <br />\n            {' '}\n            В даному шаблоні використовується структурна директива *ngFor, щоб ітерувати по масиву addresses та відображати кожну адресу в окремому елементі li.\n\n          </p>\n        </section>\n      ) : (\n        <button\n          className=\"but\"\n          type=\"button\"\n          onClick={() => {\n            handleOpen();\n          }}\n        >\n          <p>Open answers about Angular</p>\n        </button>\n      )}\n    </div>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/Screenshot8.9a9fac43.png\";","export default __webpack_public_path__ + \"static/media/Screenshot9.c39cc3f7.png\";","/* eslint-disable no-tabs */\n/* eslint-disable max-len */\nimport React, { useState } from 'react';\nimport box8 from '../../sharedScreen/Screenshot8.png';\nimport box9 from '../../sharedScreen/Screenshot9.png';\n\nexport const AboutNode = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n\n  const handleOpen = () => {\n    setIsOpen(true);\n  };\n\n  return (\n    <div className=\"node\">\n      {isOpen\n\n        ? (\n          <section className=\"answers\">\n            <button\n              className=\"but\"\n              type=\"button\"\n              onClick={() => {\n                handleClose();\n              }}\n            >\n              <p>Close answers about Node</p>\n            </button>\n            <h3>\n              1. Що таке файл package.json?\n            </h3>\n            <h3>Відповідь:</h3>\n            <p>\n              Це файл конфігурації, який зазвичай знаходиться в кореневій директорії проекту Node.js, Цей файл може бути згенерований автоматично за допомогою команди npm init\n              Цей файл зазвичай використовується для керування проектом Node.js, управління залежностями, налаштування середовища та запуску скриптів.\n\n              Деякі звичайні поля в package.json включають:\n\n              name - назва проекту.\n              <br />\n              version - поточна версія проекту.\n              <br />\n              description - короткий опис проекту.\n              <br />\n              main - головний файл проекту, який буде запущено при виконанні require() для цього пакету.\n              <br />\n              dependencies - список залежностей проекту.\n              <br />\n              devDependencies - список залежностей, які використовуються тільки під час розробки проекту.\n              <br />\n            </p>\n            <h3>\n              2. Які є типи запитів HTTP?\n            </h3>\n            <h3>Відповідь:</h3>\n            <p>\n              Є кілька основних запитів\n              <br />\n              {' '}\n              GET - запит на отримання ресурсу з сервера. Зазвичай використовується для отримання HTML-сторінок, зображень та інших файлів.\n              <br />\n              POST - запит на створення ресурсу на сервері або для відправки даних на сервер. Наприклад, можна використовувати POST-запит для відправки форми на сервер.\n\n              <br />\n              PUT - запит на оновлення існуючого ресурсу на сервері.\n\n              <br />\n              DELETE - запит на видалення ресурсу з сервера.\n            </p>\n            <h3>\n              3. Поясніть різницю між локальним і глобальним встановленням пакетів npm\n            </h3>\n            <h3>Відповідь:</h3>\n            <p>Використовуючи локальне встановлення пакетів вони зберігаються в проекті, за це відповідає папка node_modules, Глобальне встановлення пакетів NPM зберігає пакети в глобальному каталозі NPM, що зазвичай знаходиться в домашній папці користувача і для того щоб встановити глобально нам потрібно в терміналі додати -g:  npm install -g package_name.</p>\n            <h3>\n              4. Поясніть порядок виконання прослуховувачів подій у Node.js. Що буде результатом цього коду і чому?\n              Розглянемо цей код:?\n            </h3>\n            <img src={box8} alt=\"box\" />\n            <h3>Відповідь:</h3>\n            <p>\n              Спочатку створюється eventEmitter, потім до нього додаються події з console.log( -FIRST),\n              console.log(- SECOND),але так як у коді у нас спочатку викликається console.log(A),\n              потім викликається метод emit(), де першим параметром передаємо нашу подію а другим передаємо данні які будуть виводитись першими в консоль лозі і виводиться спочатку FIRST потім SECOND і закриває наш код console.log(B), Тобто консоль лог буде мати такий вигляд:\n              <br />\n              A\n              <br />\n              Emitted Statement - FIRST\n              <br />\n              Emitted Statement - SECOND\n              <br />\n              B\n            </p>\n            <h3>\n              5. Поясніть, що не так із використанням async/await у циклі forEach. Чи працює він належним чином? Ви можете це виправити?\n              Розглянемо цей код:\n            </h3>\n            <img src={box9} alt=\"box\" />\n            <h3>Відповідь:</h3>\n            <p>\n              Проблема використання async/await у циклі forEach полягає в тому, що forEach не очікує на виконання асинхронної функції, він продовжує виконувати свій цикл і не очікує на результати виконання асинхронної функції\n              <br />\n              Для коректної роботи можна використати for of, або метод масивів map:\n              <br />\n              <br />\n              {`async function printFiles() {`}\n              <br />\n              {`\n\t\t\t\t\tconst files = await getFilePaths();`}\n              <br />\n              {`\n\n\t\t\t\t\tfiles.map( async(file) => {`}\n              <br />\n              {`\n\t\t\t\t\t\tconst contents = await fs.readFile(file, 'utf8');`}\n              <br />\n              {`\n\t\t\t\t\t\tconsole.log(contents);`}\n              <br />\n              {`\n\t\t\t\t\t}`}\n              <br />\n              {`\n\t\t\t\t}`}\n              <br />\n              {`\n\t\t\t\tprintFiles();`}\n              <br />\n            </p>\n            <h3>\n              6. Що саме робить module.exports у Node.js і яким би був простий приклад?\n            </h3>\n            <h3>Відповідь:</h3>\n            <p>\n              module.exports - це обєкт в Node.js, який дозволяє експортувати функції, обєкти або дані з одного модуля до іншого. Коли модуль завантажується в Node.js, є глобальний обєкт модуля, який містить змінну exports.\n              Приклад використання\n              <br />\n              {`function add(a, b) {\n\t\t\t\t\t\t\treturn a + b;\n\t\t\t\t\t\t\t}\n\n\t\t\tmodule.exports = { add }`}\n              {' '}\n              <br />\n              {' '}\n              та експортуємо його до іншого файлу\n              {' '}\n              <br />\n              {' '}\n              {`\n\t\t\tconst {add} = require('./add.js');\n\n\t\t\tconst sum = add(2, 3);\n\t\t\tconsole.log(sum);`}\n            </p>\n          </section>\n        )\n        : (\n          <button\n            className=\"but\"\n            type=\"button\"\n            onClick={() => {\n              handleOpen();\n            }}\n          >\n            <p>Open answers about Node</p>\n          </button>\n        )\n      }\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.css';\nimport { AboutAll } from './components/FIrstAnswer';\nimport { AboutAngular } from './components/Angular';\nimport { AboutNode } from './components/Node.js/Node';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AboutAll />\n      <AboutAngular />\n      <AboutNode />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}